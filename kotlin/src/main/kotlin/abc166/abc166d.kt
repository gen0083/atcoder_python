// https://atcoder.jp/contests/abc166/tasks/abc166_d

fun main() {
    abc166d()
}

fun abc166d() {
    val x = readLine()!!.toLong()
    // 解説が唐突すぎるわって思った問題
    // 前提を飛ばしすぎてて解説が理解できないので補足すると、
    // つまり真面目にA^5-B^5を式変形して組み合わせを一発で求められるような形に変形するのは困難である。
    // であれば、とりあえずA^5-B^5に整数を割り当てたときに、どういった変化をたどるのかをまず確認してみましょうということ
    // ここでA=Bとなるnを代入すると、何を入れても答えは0になる(n^5-n^5はゼロ)ので、とりあえずnとn-1を代入してみて変化を確認する
    // すると解説の冒頭になる
    // とりあえずAとBに当てはまる整数の組さえわかればいいのだから、探索範囲をまずは探ろうというのが解説の冒頭。
    // なぜnとn-1かというと、求めるのは整数の組であって、A=Bはありえない（求めるXは1~10^9だから）次に組み合わせとして小さいのは1の差がある数字だから
    // これは別にnとn+1で探索してもあんまり変わらないと思う
    // この式の探索範囲を調べるのは、コードで書いてやればよい
    // AとBが1の差の値であるときが探索範囲がもっとも広く、その場合でも-119~120の間、すなわちたかだか240個の整数でしかない
    // （ちなみにAとBが2の差である場合、探索範囲は-99~100と狭まる、3だと-89~92とAとBの差が広がるほど探索範囲は狭まる）
    // ということは240^2探索すれば、出題の制約からXと一致する整数の組み合わせは見つかるはずである
    // よってこの問題は、「とりあえず数式に対して適当に値を代入してみて探索範囲を確認してみる」という行動が取れるかどうかが最大のポイントとなる問題
    //    researchValueRange()
    for (a in -119L..120L) {
        for (b in -119L..120L) {
            if (a == b) continue
            if (a * a * a * a * a - (b * b * b * b * b) == x) {
                println("$a $b")
                return
            }
        }
    }
}

private fun researchValueRange() {
    var n = 1L
    val sa = 3L
    var ans = 0L
    while (ans < 1_000_000_000L) {
        val b = n - sa
        ans = n * n * n * n * n - (b * b * b * b * b)
        println("A=$n,B=$b -> $ans")
        n++
    }
    n = 1L
    ans = 0L
    while (ans < 1_000_000_000L) {
        val b = n - sa
        ans = n * n * n * n * n - (b * b * b * b * b)
        println("A=$n,B=$b -> $ans")
        n--
    }
}