# シェルソート
# http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ALDS1_2_D&lang=jp


count = 0
m = 2
g = []
# gの間隔の選び方はいろいろあるが、あまりに大きすぎない間隔であること、最後に1を使うことを守ればオッケー
# gのi番目が3*g[i - 1] + 1の数列を使うとn**1.25の計算量になることが予測されているらしい
# ただ今回の問題であれば、n-1を半分(切り捨て)にして1までの数列を使って実行するのと大差なかった
gd = [1, 4, 13, 40, 121, 364, 1093, 3280, 9841, 29524, 88573, 265720, 797161, 2391484, 7174453,
      21523360, 64570081, 193710244, 581130733, 1743392200, 5230176601, 15690529804, 47071589413,
      141214768240, 423644304721, 1270932914164, 3812798742493, 11438396227480, 34315188682441,
      102945566047324, 308836698141973, 926510094425920, 2779530283277761, 8338590849833284,
      25015772549499853, 75047317648499560, 225141952945498681, 675425858836496044,
      2026277576509488133, 6078832729528464400, 18236498188585393201, 54709494565756179604,
      164128483697268538813, 492385451091805616440, 1477156353275416849321, 4431469059826250547964,
      13294407179478751643893, 39883221538436254931680, 119649664615308764795041,
      358948993845926294385124, 1076846981537778883155373, 3230540944613336649466120,
      9691622833840009948398361, 29074868501520029845195084, 87224605504560089535585253,
      261673816513680268606755760, 785021449541040805820267281, 2355064348623122417460801844,
      7065193045869367252382405533, 21195579137608101757147216600, 63586737412824305271441649801,
      190760212238472915814324949404, 572280636715418747442974848213,
      1716841910146256242328924544640, 5150525730438768726986773633921,
      15451577191316306180960320901764, 46354731573948918542880962705293,
      139064194721846755628642888115880, 417192584165540266885928664347641,
      1251577752496620800657785993042924, 3754733257489862401973357979128773,
      11264199772469587205920073937386320, 33792599317408761617760221812158961,
      101377797952226284853280665436476884, 304133393856678854559841996309430653,
      912400181570036563679525988928291960, 2737200544710109691038577966784875881,
      8211601634130329073115733900354627644, 24634804902390987219347201701063882933,
      73904414707172961658041605103191648800, 221713244121518884974124815309574946401,
      665139732364556654922374445928724839204, 1995419197093669964767123337786174517613,
      5986257591281009894301370013358523552840, 17958772773843029682904110040075570658521,
      53876318321529089048712330120226711975564, 161628954964587267146136990360680135926693,
      484886864893761801438410971082040407780080, 1454660594681285404315232913246121223340241,
      4363981784043856212945698739738363670020724, 13091945352131568638837096219215091010062173,
      39275836056394705916511288657645273030186520, 117827508169184117749533865972935819090559561,
      353482524507552353248601597918807457271678684, 1060447573522657059745804793756422371815036053,
      3181342720567971179237414381269267115445108160,
      9544028161703913537712243143807801346335324481,
      28632084485111740613136729431423404039005973444,
      85896253455335221839410188294270212117017920333,
      257688760366005665518230564882810636351053761000,
      773066281098016996554691694648431909053161283001]
# for i in range(1, 101):
#     gd.append(gd[i - 1] * 3 + 1)


def do_code():
    global count, m, g
    num = int(input())
    array = [int(input()) for _ in range(num)]
    shell_sort(array, num)
    print(m)
    print(dump_array(g))
    print(count)
    for i in array:
        print(str(i))


def insertion_sort(array, num, g):
    global count
    for i in range(g, num):
        v = array[i]
        j = i - g
        while j >= 0 and array[j] > v:
            array[j + g] = array[j]
            j = j - g
            count += 1
        array[j + g] = v


def shell_sort(array, num):
    global count, m, g
    count = 0
    index = 0
    for i, k in enumerate(gd):
        if k > num:
            index = i - 1
            break
    g = gd[index::-1]
    m = len(g)
    for i in range(m):
        insertion_sort(array, num, g[i])


def dump_array(array):
    return " ".join(map(str, array))


if __name__ == '__main__':
    do_code()
